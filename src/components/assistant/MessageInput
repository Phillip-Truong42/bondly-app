import React, { useState, useRef } from "react";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Sparkles, Loader2, Paperclip, X } from "lucide-react";
import { motion } from "framer-motion";
import { useI18n } from '../i18n/I18nProvider';

export default function MessageInput({ onGetHelp, isLoading }) {
  const { t } = useI18n();
  const [message, setMessage] = useState("");
  const [imageFile, setImageFile] = useState(null);
  const fileInputRef = useRef(null);
  
  const handleSubmit = () => {
    if (message.trim()) {
      onGetHelp(message.trim(), imageFile);
    }
  };
  
  const handleFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
        setImageFile(e.target.files[0]);
    }
  };

  const handleRemoveImage = () => {
    setImageFile(null);
    if(fileInputRef.current) {
        fileInputRef.current.value = "";
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-4"
    >
      <div className="space-y-2">
        <label className="text-sm font-medium text-gray-700">
          {t('strugglingMessage')}
        </label>
        <div className="relative">
            <Textarea
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              placeholder={t('messagePlaceholder')}
              className="min-h-[120px] resize-none border-orange-200 focus:border-orange-400 focus:ring-orange-400/20 pr-12"
              disabled={isLoading}
            />
            <input 
                type="file"
                ref={fileInputRef}
                onChange={handleFileChange}
                className="hidden"
                accept="image/png, image/jpeg, image/jpg"
            />
            <Button 
                size="icon" 
                variant="ghost" 
                className="absolute bottom-2 right-2 text-gray-500 hover:text-orange-600"
                onClick={() => fileInputRef.current?.click()}
            >
                <Paperclip className="w-5 h-5" />
            </Button>
        </div>
      </div>
      
      {imageFile && (
        <div className="flex items-center justify-between p-2 bg-orange-50 border border-orange-100 rounded-lg">
            <div className="flex items-center gap-3">
                <img src={URL.createObjectURL(imageFile)} alt="Preview" className="w-12 h-12 rounded object-cover" />
                <span className="text-sm text-gray-700 truncate">{imageFile.name}</span>
            </div>
            <Button size="icon" variant="ghost" onClick={handleRemoveImage} className="text-gray-500 hover:text-red-500">
                <X className="w-4 h-4" />
            </Button>
        </div>
      )}

      <Button
        onClick={handleSubmit}
        disabled={!message.trim() || isLoading}
        className="w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white h-12 rounded-xl font-medium transition-all"
      >
        {isLoading ? (
          <>
            <Loader2 className="w-5 h-5 mr-2 animate-spin" />
            {t('gettingResponses')}
          </>
        ) : (
          <>
            <Sparkles className="w-5 h-5 mr-2" />
            {t('getHelpButton')}
          </>
        )}
      </Button>
    </motion.div>
  );
}