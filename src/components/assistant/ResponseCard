
import React from "react";
import { motion } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Copy, ThumbsUp, ThumbsDown, Lightbulb } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { useI18n } from '../i18n/I18nProvider';

export default function ResponseCards({ 
  suggestions, 
  situationAnalysis, 
  goldenTip, 
  onCopyResponse,
  onFeedback 
}) {
  const { t } = useI18n();

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    onCopyResponse?.(text);
  };

  const toneColors = {
    witty: "bg-purple-100 text-purple-700",
    direct: "bg-green-100 text-green-700", 
    curious: "bg-pink-100 text-pink-700",
    flirty: "bg-orange-100 text-orange-700"
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-6"
    >
      {/* Situation Analysis */}
      {situationAnalysis && (
        <div className="p-4 bg-blue-50 border border-blue-200 rounded-xl">
          <div className="flex items-start gap-2">
            <Lightbulb className="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" />
            <div>
              <h3 className="text-sm font-medium text-blue-800">{t('situationAnalysis')}</h3>
              <p className="text-sm text-blue-700 mt-1">{situationAnalysis}</p>
            </div>
          </div>
        </div>
      )}

      {/* Response Suggestions */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-gray-900">{t('responseOptions')}</h3>
        {suggestions?.map((suggestion, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <Card className="overflow-hidden border-gray-200 hover:shadow-md transition-shadow">
              <CardContent className="p-0">
                <div className="p-4 space-y-3">
                  <div className="flex items-center justify-between">
                    <Badge className={toneColors[suggestion.tone] || "bg-gray-100 text-gray-700"}>
                      {suggestion.tone}
                    </Badge>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(suggestion.response)}
                      className="text-orange-600 hover:text-orange-700 hover:bg-orange-50"
                    >
                      <Copy className="w-4 h-4 mr-1" />
                      Copy
                    </Button>
                  </div>

                  <div className="p-3 bg-gray-50 rounded-lg">
                    <p className="text-gray-900 font-medium">{suggestion.response}</p>
                  </div>

                  {/* Pros and Cons */}
                  <div className="grid grid-cols-1 gap-3">
                    {suggestion.pros?.length > 0 && (
                      <div>
                        <h4 className="text-xs font-medium text-green-700 mb-1">{t('whyThisWorks')}</h4>
                        <ul className="text-xs text-green-600 space-y-0.5">
                          {suggestion.pros.map((pro, i) => (
                            <li key={i}>• {pro}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                    
                    {suggestion.cons?.length > 0 && (
                      <div>
                        <h4 className="text-xs font-medium text-amber-700 mb-1">{t('consider')}</h4>
                        <ul className="text-xs text-amber-600 space-y-0.5">
                          {suggestion.cons.map((con, i) => (
                            <li key={i}>• {con}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>

                  {/* Feedback buttons */}
                  <div className="flex justify-center gap-2 pt-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => onFeedback?.(suggestion, 'positive')}
                      className="text-green-600 hover:text-green-700 hover:bg-green-50"
                    >
                      <ThumbsUp className="w-4 h-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => onFeedback?.(suggestion, 'negative')}
                      className="text-red-500 hover:text-red-600 hover:bg-red-50"
                    >
                      <ThumbsDown className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        ))}
      </div>

      {/* Golden Tip */}
      {goldenTip && (
        <div className="p-4 bg-gradient-to-r from-orange-50 to-red-50 border border-orange-200 rounded-xl">
          <div className="flex items-start gap-2">
            <div className="w-8 h-8 bg-gradient-to-r from-orange-400 to-red-400 rounded-full flex items-center justify-center flex-shrink-0">
              <Lightbulb className="w-4 h-4 text-white" />
            </div>
            <div>
              <h3 className="text-sm font-medium text-orange-800">{t('goldenTip')}</h3>
              <p className="text-sm text-orange-700 mt-1">{goldenTip}</p>
            </div>
          </div>
        </div>
      )}
    </motion.div>
  );
}
